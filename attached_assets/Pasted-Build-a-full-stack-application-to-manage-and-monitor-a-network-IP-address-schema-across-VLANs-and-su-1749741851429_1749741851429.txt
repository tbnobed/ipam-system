Build a full-stack application to manage and monitor a network IP address schema across VLANs and subnets. The application should serve as a lightweight internal IPAM system with real-time device status and discovery. This tool will be deployed in a broadcast facility where precision and uptime visibility are critical.

Core Functional Requirements:
IP Address Schema Management

Define VLANs, subnets, gateway addresses, assignment types (static/DHCP), cable colors, and descriptions.

Allow manual entry and editing of assigned IPs (e.g., hostnames, device purpose, location, MAC address).

Track usage and availability of each subnet and visually indicate saturation levels.

Live Device Discovery

Perform periodic ICMP (ping) sweeps across all configured subnets.

Show status: ðŸŸ¢ Live / ðŸ”´ Offline for each device.

Discover:

Hostname (via reverse DNS)

Open TCP ports (scan common ports 22, 80, 443, 554, etc.)

MAC address + vendor lookup (via ARP cache or SNMP if available)

Dashboard & UI Features

Visual subnet usage pie charts or heatmaps.

Device status table with search & filter by VLAN, location, or device type.

Quick view for:

Newly appeared devices

Offline devices

IP conflicts (duplicate MACs or hostnames)

CSV/Excel export of current IP schema

Scan Scheduler

Auto-scan each subnet every X minutes (user-configurable).

Store historical uptime records for each IP for basic uptime analytics.

Security & Access

Admin login with roles (e.g., view-only vs. admin).

Logging of all schema changes (audit trail).

Tech Stack Suggestions

Backend: Python (Flask or FastAPI)

Frontend: React or Vue

DB: PostgreSQL or SQLite

Optional: Use nmap, scapy, or ping3 for network scanning

ðŸ’¡ Optional/Advanced Features
NetBox-style rack diagrams and asset mapping

SNMP interface stats polling

Email or Slack alerts when key devices go offline

REST API for external integrations

QR code printing for device location tagging

Mobile-friendly dashboard view

Output Expectations
Web-based GUI hosted on Linux (e.g., Ubuntu server)

Configurable via .env or admin panel

Code should be modular and support subnet/VLAN expansion

Deliver Dockerfile for containerized deployment